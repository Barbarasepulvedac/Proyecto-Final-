trat_salud == 2 ~ "No",
FALSE ~ NA_character_))
View(datos_proc)
#Tratamiento salud
datos_proc <- datos_proc %>%
mutate(trat_salud3 = if_else(trat_salud == "1", 1, 0)))
#Tratamiento salud
datos_proc <- datos_proc %>%
mutate(trat_salud3 = if_else(trat_salud == "1", 1, 0))
datos_proc <- datos_proc %>%
mutate(sexo = as_factor(sexo),
tipo_vivienda = as_factor(tipo_vivienda),
trat_salud = as_factor(trat_salud))
View(datos_proc)
datos_proc <- datos_proc %>%
mutate(trat_salud3 = if_else(trat_salud == " Sí", 1, 0))
datos_proc <- datos_proc %>%
mutate(trat_salud3 = if_else(trat_salud == " Sí", 0, 1))
View(datos_proc)
datos_proc <- datos_proc %>%
mutate(trat_salud3 = if_else(trat_salud == " Sí", 1, 0))
datos_proc <- datos_proc %>%
mutate(trat_salud3 = if_else(trat_salud == "Sí", 1, 0))
View(datos_proc)
View(datos_proc)
datos_proc <- datos_proc %>%
mutate(trat_salud3 = if_else(trat_salud == "Sí", 1, 0))
View(datos_proc)
datos_proc <- datos_proc %>%
mutate(trat_salud3 = if_else(trat_salud == "1. Sí", 1, 0))
View(datos_proc)
datos_proc <- TS4 %>%
select(sexo, edad, tipo_vivienda = b2, est_animo = c2, trat_salud = c3, problemas = c10)
datos_proc <- datos_proc %>%
mutate(edad = as_factor(car::recode(edad, c("18:39='Jovenes';40:59='Adulto'; 60:96='Adulto mayor'"), as.factor = T, levels = c("Jovenes", "Adulto", "Adulto mayor"))))
datos_proc <- datos_proc %>%
mutate(sexo = as_factor(sexo),
tipo_vivienda = as_factor(tipo_vivienda),
trat_salud = as_factor(trat_salud))
datos_proc <- datos_proc %>%
mutate(trat_salud2 = if_else(trat_salud == "1. Sí", 1, 0))
View(datos_proc)
datos_proc <- datos_proc %>%
mutate(problemas = as_factor(case_when(problemas == 1:2 ~ "Nunca",
problemas == 3 ~ "A veces",
problemas == 4:5 ~ "Siempre",
FALSE ~ NA_character_)))
datos_proc <- datos_proc %>%
mutate(problemas = as_factor(case_when(problemas == 1 ~ "Nunca",
problemas == 2 ~ "Nunca",
problemas == 3 ~ "A veces",
problemas == 4 ~ "Siempre",
problemas == 5 ~ "Siempre"
FALSE ~ NA_character_)))
datos_proc <- datos_proc %>%
mutate(problemas = as_factor(case_when(problemas == 1 ~ "Nunca",
problemas == 2 ~ "Nunca",
problemas == 3 ~ "A veces",
problemas == 4 ~ "Siempre",
problemas == 5 ~ "Siempre",
FALSE ~ NA_character_)))
View(datos_proc)
saveRDS(datos_proc, file = "output/data/datos_proc.rds")
View(TS4)
#1. Carga de librerías
pacman::p_load(tidyverse, sjPlot, haven,
srvyr,
survey,
magrittr,
dyplr)
#2. Carga de base de datos Termómetro Social
TS4 <- read_dta("input/data/TS4.dta")
datos_proc <- TS4 %>%
select(sexo, edad, tipo_vivienda = b2, est_animo = c2, trat_salud = c3, problemas = c10)
datos_proc <- datos_proc %>%
mutate(edad = as_factor(car::recode(edad, c("18:39='Jovenes';40:59='Adulto'; 60:96='Adulto mayor'"), as.factor = T, levels = c("Jovenes", "Adulto", "Adulto mayor"))))
datos_proc <- datos_proc %>%
mutate(sexo = as_factor(sexo),
tipo_vivienda = as_factor(tipo_vivienda),
trat_salud = as_factor(trat_salud))
datos_proc <- datos_proc %>%
mutate(trat_salud2 = if_else(trat_salud == "1. Sí", 1, 0))
datos_proc <- datos_proc %>%
mutate(problemas = as_factor(case_when(problemas == 1 ~ "Nunca",
problemas == 2 ~ "Nunca",
problemas == 3 ~ "A veces",
problemas == 4 ~ "Siempre",
problemas == 5 ~ "Siempre",
FALSE ~ NA_character_)))
#5. Guardamos el df procesado
saveRDS(datos_proc, file = "output/data/datos_proc.rds")
datos_proc <- datos_proc %>%
mutate_at(vars(edad, sexo, problemas, tipo_vivienda),
funs(forcats::as_factor(.)))
#5. Guardamos el df procesado
saveRDS(datos_proc, file = "output/data/datos_proc.rds")
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, sjPlot, haven,
srvyr,
magrittr,
dyplr)
load("output/data/datos_proc.rds")
#5. Guardamos el df procesado
saveRDS(datos_proc, file = "output/data/datos_proc.rds")
datos_proc <- readRDS("output/data/datos_proc.rds")
knitr::opts_chunk$set(echo = TRUE)
datos_proc <- readRDS("../output/data/datos_proc.rds")
View(TS4)
datos_proc <- TS4 %>%
select(sexo, edad, tipo_vivienda = b2, est_animo = c2, trat_salud = c3, problemas = c10, factor_TS4)
#1. Carga de librerías
pacman::p_load(tidyverse, sjPlot, haven,
srvyr,
magrittr,
dyplr)
#2. Carga de base de datos Termómetro Social
TS4 <- read_dta("input/data/TS4.dta")
datos_proc <- TS4 %>%
select(sexo, edad, tipo_vivienda = b2, est_animo = c2, trat_salud = c3, problemas = c10, factor_TS4)
datos_proc <- datos_proc %>%
mutate(edad = as_factor(car::recode(edad, c("18:39='Jovenes';40:59='Adulto'; 60:96='Adulto mayor'"), as.factor = T, levels = c("Jovenes", "Adulto", "Adulto mayor"))))
datos_proc <- datos_proc %>%
mutate(sexo = as_factor(sexo),
tipo_vivienda = as_factor(tipo_vivienda),
trat_salud = as_factor(trat_salud))
datos_proc <- datos_proc %>%
mutate(trat_salud2 = if_else(trat_salud == "1. Sí", 1, 0))
datos_proc <- datos_proc %>%
mutate(problemas = as_factor(case_when(problemas == 1 ~ "Nunca",
problemas == 2 ~ "Nunca",
problemas == 3 ~ "A veces",
problemas == 4 ~ "Siempre",
problemas == 5 ~ "Siempre",
FALSE ~ NA_character_)))
##Le indicamos a R que estas variables son de factor para utilizarlas en la regresion lineal
datos_proc <- datos_proc %>%
mutate_at(vars(edad, sexo, problemas, tipo_vivienda),
funs(forcats::as_factor(.)))
#5. Guardamos el df procesado
saveRDS(datos_proc, file = "output/data/datos_proc.rds")
pacman::p_load(tidyverse, sjPlot, haven,
srvyr,
magrittr,
dyplr)
datos_proc <- readRDS("../output/data/datos_proc.rds")
View(TS4)
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_CTYPE", "spanish")
options(OutDec= ",", digits = 3)
View(datos_proc)
modelo1 <- lm(est_animo ~ tipo_vivienda, weights= factor_expansion, data = datos_proc)
modelo1 <- lm(est_animo ~ tipo_vivienda, weights= factor_TS4, data = datos_proc)
modelo1 <- lm(est_animo ~ tipo_vivienda, weights= factor_TS4, data = datos_proc)
sjPlot::tab_model(modelo1,
string.intercept = "(Intercepto)",
string.pred = "Predictores",
p.style = "stars",
show.ci = FALSE,
collapse.ci = T,
digits = 3,
dv.labels = c("Modelo 1"),
show.reflvl = TRUE,
encoding = "UTF-8",
lang = "es")
modelo1 <- lm(est_animo ~ tipo_vivienda, weights= factor_TS4, data = datos_proc)
sjPlot::tab_model(modelo1,
string.intercept = "(Intercepto)",
string.pred = "Predictores",
p.style = "stars",
show.ci = FALSE,
collapse.ci = T,
digits = 3,
dv.labels = ("Modelo 1"),
show.reflvl = TRUE,
encoding = "UTF-8",
lang = "es")
sjPlot::tab_model(modelo1,
string.intercept = "(Intercepto)",
string.pred = "Predictores",
p.style = "stars",
show.ci = FALSE,
collapse.ci = T,
digits = 3,
dv.labels = ("Modelo 1"),
show.reflvl = TRUE,
encoding = "UTF-8",
lang = "es")
sjPlot::tab_model(modelo1,
string.intercept = "(Intercepto)",
string.pred = "Predictores",
p.style = "stars",
show.ci = FALSE,
collapse.ci = T,
digits = 3,
dv.labels = ("Modelo 1"),
show.reflvl = TRUE,
encoding = "UTF-8",
transform = 'exp',
lang = "es")
modelo1 <- lm(est_animo ~ tipo_vivienda, weights= factor_TS4, data = datos_proc)
modelo2 <- lm(est_animo ~ trat_salud, weights = factor_TS4, data = datos_proc)
sjPlot::tab_model(list(modelo1, modelo2),
string.intercept = "(Intercepto)",
string.pred = "Predictores",
p.style = "stars",
show.ci = FALSE,
collapse.ci = T,
digits = 3,
dv.labels = ("Modelo 1"),
show.reflvl = TRUE,
encoding = "UTF-8",
transform = 'exp',
lang = "es")
sjPlot::tab_model(list(modelo1, modelo2),
string.intercept = "(Intercepto)",
string.pred = "Predictores",
p.style = "stars",
show.ci = FALSE,
collapse.ci = T,
digits = 3,
dv.labels = ("Modelo 1"),
show.reflvl = TRUE,
encoding = "UTF-8",
lang = "es")
sjPlot::tab_model(list(modelo1, modelo2),
string.intercept = "(Intercepto)",
string.pred = "Predictores",
p.style = "stars",
show.ci = FALSE,
collapse.ci = T,
digits = 3,
dv.labels = c("Modelo 1", "Modelo 2"),
show.reflvl = TRUE,
encoding = "UTF-8",
lang = "es")
sjPlot::tab_model(modelo1,
show.ci=FALSE,
encoding = "UTF-8",
file = "output/figures/tab_modelo1.doc")
sjPlot::tab_model(modelo1,
show.ci=FALSE,
encoding = "UTF-8",
file = "../output/figures/tab_modelo1.doc")
sjPlot::tab_model(modelo1,
show.ci=FALSE,
encoding = "Latin-1",
file = "../output/figures/tab_modelo1.doc")
sjPlot::tab_model(modelo1,
show.ci=FALSE,
encoding = "Latin-1",
file = "../output/figures/tab_modelo1.doc")
sjPlot::tab_model(modelo1,
show.ci=FALSE,
encoding = "Latin-1",
lang = "es",
file = "../output/figures/tab_modelo1.doc")
sjPlot::tab_model(modelo1,
show.ci=FALSE,
encoding = "Latin-1",
lang = "es",
transform = "exp",
file = "../output/figures/tab_modelo1.doc")
sjPlot::tab_model(modelo1,
show.ci=FALSE,
encoding = "Latin-1",
file = "../output/figures/tab_modelo1.doc")
plot_frq(datos_proc, est_animo,
title = "Gráfico de Estado de ánimo actual",
type = c("dot"))
#1. Carga de librerías
pacman::p_load(tidyverse, sjPlot, haven,
srvyr,
magrittr,
dyplr)
#2. Carga de base de datos Termómetro Social
TS4 <- read_dta("input/data/TS4.dta")
datos_proc <- TS4 %>%
select(sexo, edad, tipo_vivienda = b2, est_animo = c2, trat_salud = c3, problemas = c10, factor_TS4)
datos_proc <- datos_proc %>%
mutate(edad = as_factor(car::recode(edad, c("18:39='Jovenes';40:59='Adulto'; 60:96='Adulto mayor'"), as.factor = T, levels = c("Jovenes", "Adulto", "Adulto mayor"))))
datos_proc <- datos_proc %>%
mutate(sexo = as_factor(sexo),
tipo_vivienda = as_factor(tipo_vivienda),
trat_salud = as_factor(trat_salud))
datos_proc <- datos_proc %>%
mutate(trat_salud2 = if_else(trat_salud == "1. Sí", 1, 0))
##Le indicamos a R que estas variables son de factor para utilizarlas en la regresion lineal
datos_proc <- datos_proc %>%
mutate_at(vars(edad, sexo, problemas, tipo_vivienda),
funs(forcats::as_factor(.)))
#5. Guardamos el df procesado
saveRDS(datos_proc, file = "output/data/datos_proc.rds")
View(datos_proc)
datos_proc <- readRDS("../output/data/datos_proc.rds")
pacman::p_load(tidyverse, sjPlot,
srvyr,
magrittr,
dyplr)
datos_proc <- readRDS("../output/data/datos_proc.rds")
modelo1 <- lm(est_animo ~ tipo_vivienda + edad + sexo + trat_salud + problemas, weights= factor_TS4, data = datos_proc)
sjPlot::tab_model(modelo1,
show.ci=FALSE,
encoding = "UTF-8",
file = "output/figures/tab_modelo1.doc")
sjPlot::tab_model(modelo1,
show.ci=FALSE,
encoding = "UTF-8",
file = "output/figures/tab_modelo1.doc")
sjPlot::tab_model(modelo1,
show.ci=FALSE,
encoding = "UTF-8",
file = "../output/figures/tab_modelo1.doc")
summary(modelo1)
modelo1 <- lm(est_animo ~ tipo_vivienda + edad + sexo + trat_salud2 + problemas, weights= factor_TS4, data = datos_proc)
summary(modelo1)
sjPlot::tab_model(modelo1,
show.ci=FALSE,
encoding = "UTF-8",
file = "../output/figures/tab_modelo1.doc")
sjPlot::tab_model(modelo1,
show.ci=FALSE,
encoding = "UTF-8",
file = "../output/figures/tab_modelo1.doc")
sjPlot::tab_model(modelo1,
string.intercept = "(Intercepto)",
string.pred = "Predictores",
p.style = "stars",
show.ci = FALSE,
collapse.ci = T,
digits = 3,
dv.labels = ("Modelo 1"),
show.reflvl = TRUE,
encoding = "UTF-8",
lang = "es")
sjPlot::tab_model(modelo1,
string.intercept = "(Intercepto)",
string.pred = "Predictores",
p.style = "stars",
show.ci = FALSE,
collapse.ci = T,
digits = 3,
dv.labels = ("Modelo 1"),
show.reflvl = TRUE,
transform = "exp",
encoding = "UTF-8",
lang = "es")
sjPlot::tab_model(modelo1,
string.intercept = "(Intercepto)",
string.pred = "Predictores",
p.style = "stars",
show.ci = FALSE,
collapse.ci = T,
digits = 3,
dv.labels = ("Modelo 1"),
show.reflvl = TRUE,
transform = "exp",
encoding = "UTF-8",
lang = "es",
file = "../output/figures/tab_modelo1.doc")
##Le indicamos a R que estas variables son de factor para utilizarlas en la regresion lineal
datos_proc <- datos_proc %>%
mutate_at(vars(edad, sexo, tipo_vivienda),
funs(forcats::as_factor(.)))
#5. Guardamos el df procesado
saveRDS(datos_proc, file = "output/data/datos_proc.rds")
datos_proc <- readRDS("../output/data/datos_proc.rds")
modelo1 <- lm(est_animo ~ tipo_vivienda + edad + sexo, weights= factor_TS4, data = datos_proc)
modelo2 <- lm(est_animo ~ trat_salud + edad + sexo, weights= factor_TS4, data = datos_proc)
sjPlot::tab_model(list(modelo1,modelo2),
string.intercept = "(Intercepto)",
string.pred = "Predictores",
p.style = "stars",
show.ci = FALSE,
collapse.ci = T,
digits = 3,
dv.labels = c("Modelo 1", "Modelo2"),
show.reflvl = TRUE,
transform = "exp",
encoding = "UTF-8",
lang = "es",
file = "../output/figures/tab_modelo1.doc")
modelo1 <- lm(est_animo ~ tipo_vivienda + edad + sexo, weights= factor_TS4, data = datos_proc)
modelo2 <- lm(est_animo ~ trat_salud + edad + sexo, weights= factor_TS4, data = datos_proc)
modelo3 <- lm(est_animo ~ problemas + edad + sexo, weights= factor_TS4, data = datos_proc )
sjPlot::tab_model(list(modelo1,modelo2,modelo3),
string.intercept = "(Intercepto)",
string.pred = "Predictores",
p.style = "stars",
show.ci = FALSE,
collapse.ci = T,
digits = 3,
dv.labels = c("Modelo 1", "Modelo2","Modelo 3"),
show.reflvl = TRUE,
transform = "exp",
encoding = "UTF-8",
lang = "es",
file = "../output/figures/tab_modelo1.doc")
datos_proc <- datos_proc %>%
mutate(problemas = as.numeric(problemas))
##Le indicamos a R que estas variables son de factor para utilizarlas en la regresion lineal
datos_proc <- datos_proc %>%
mutate_at(vars(edad, sexo, tipo_vivienda),
funs(forcats::as_factor(.)))
#5. Guardamos el df procesado
saveRDS(datos_proc, file = "output/data/datos_proc.rds")
datos_proc <- readRDS("../output/data/datos_proc.rds")
obj_enc <- datos_proc %>%
as_survey_design(ids = 1 ,
weights = factor_TS4)
View(obj_enc)
modelo1 <- lm(est_animo ~ tipo_vivienda, weights= factor_TS4, data = datos_proc)
modelo2 <- lm(est_animo ~ problemas, weights= factor_TS4, data = datos_proc)
sjPlot::tab_model(list(modelo1,modelo2),
string.intercept = "(Intercepto)",
string.pred = "Predictores",
p.style = "stars",
show.ci = FALSE,
collapse.ci = T,
digits = 3,
dv.labels = c("Modelo 1", "Modelo 2"),
show.reflvl = TRUE,
encoding = "UTF-8",
lang = "es")
summary(modelo1)
summary(modelo2)
modelo1 <- lm(est_animo ~ tipo_vivienda, data = datos_proc, weights= factor_TS4)
modelo2 <- lm(est_animo ~ problemas, data = datos_proc, weights= factor_TS4)
sjPlot::tab_model(list(modelo1,modelo2),
string.intercept = "(Intercepto)",
string.pred = "Predictores",
p.style = "stars",
show.ci = FALSE,
collapse.ci = T,
digits = 3,
dv.labels = c("Modelo 1", "Modelo 2"),
show.reflvl = TRUE,
encoding = "UTF-8",
lang = "es")
modelo3 <- lm(est_animo ~ sexo, data = datos_proc, weights = factor_TS4)
summary(modelo3)
summary(modelo2)
summary(modelo1)
datos_proc$tipo_vivienda <-  forcats::as_factor(datos_proc$tipo_vivienda)
#5. Guardamos el df procesado
saveRDS(datos_proc, file = "output/data/datos_proc.rds")
datos_proc <- readRDS("../output/data/datos_proc.rds")
modelo1 <- lm(est_animo ~ tipo_vivienda, data = datos_proc, weights= factor_TS4)
modelo2 <- lm(est_animo ~ problemas, data = datos_proc, weights= factor_TS4)
summary(modelo1)
modelo3 <- lm(est_animo ~ sexo + edad, data = datos_proc, weights = factor_TS4)
summary(modelo3)
datos_proc<-datos_proc %>%
mutate(problemas2 = case_when(problemas == 1 ~ "Nunca",
problemas == 2 ~ "Nunca",
problemas == 3 ~ "A veces",
problemas == 4 ~ "Siempre",
problemas == 5 ~ "Siempre",
FALSE ~ NA_character_))
##Le indicamos a R que estas variables son de factor para utilizarlas en la regresion lineal
datos_proc <- datos_proc %>%
mutate_at(vars(edad, sexo, tipo_vivienda, problemas2),
funs(forcats::as_factor(.)))
datos_proc$tipo_vivienda <-  forcats::as_factor(datos_proc$tipo_vivienda)
#5. Guardamos el df procesado
saveRDS(datos_proc, file = "output/data/datos_proc.rds")
datos_proc <- readRDS("../output/data/datos_proc.rds")
obj_enc <- datos_proc %>%
as_survey_design(ids = 1 ,
weights = factor_TS4)
modelo1 <- lm(est_animo ~ tipo_vivienda, data = datos_proc, weights= factor_TS4)
modelo2 <- lm(est_animo ~ problemas, data = datos_proc, weights= factor_TS4)
modelo1 <- lm(est_animo ~ tipo_vivienda, data = datos_proc, weights= factor_TS4)
modelo2 <- lm(est_animo ~ problemas2, data = datos_proc, weights= factor_TS4)
summary(modelo2)
modelo3 <- lm(est_animo ~ sexo + edad, data = datos_proc, weights = factor_TS4)
modelo_completo <- lm(est_animo ~ tipo_vivienda + trat_salud + sexo + edad + problemas2, data = datos_proc, weights = factor_TS4)
summary(modelo_completo)
sjPlot::tab_model(modelo1,
show.ci=FALSE,
encoding = "UTF-8",
file = "../output/figures/tab_modelo1.doc")
![]("../output/images/tabla_modelo1.png")
![Alt text]("../output/images/tabla_modelo1.png")
![]("../output/images/tabla_modelo1.png")
![Alt text]("/output/images/tabla_modelo1.png")
![Alt text("../output/images/tabla_modelo1.png")]
![](https://github.com/learn-R/examen-Barbarasepulvedac/blob/main/output/images/tabla_modelo1.png)
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_CTYPE", "spanish")
options(OutDec= ",", digits = 3)
options(scipen = 999)
![](https://github.com/learn-R/examen-Barbarasepulvedac/blob/main/output/images/tabla_modelo1.png)
![](https://github.com/learn-R/examen-Barbarasepulvedac/blob/main/output/images/tabla_modelo1.png)
sjPlot::tab_model(modelo2,
show.ci=FALSE,
encoding = "UTF-8",
file = "../output/figures/tab_modelo2.doc")
sjPlot::tab_model(modelo3,
show.ci=FALSE,
encoding = "UTF-8",
file = "../output/figures/tab_modelo3.doc")
sjPlot::tab_model(modelo_completo,
show.ci=FALSE,
encoding = "UTF-8",
file = "../output/figures/tab_modelo_completo.doc")
plot_model(modelo_completo, type = c("est"),
show.intercept = T,
show.values = T,
show.p = T,
digits = 3,
vline.color = "purple",
title = "Modelo de regresión lineal para Modelo Completo")
